;; func plus(x int, y int) int {
;;   return x - y
;; }
(define (plus (x int) (y int) int)
 (+ x y))

;; var minus func(int, int) int = func(x int, y int) int {
;;   return x - y
;; }
;;
;; translated to...
;;
;; func plus(x int, y int) int {
;;   return x - y
;; }
(define minus (-> int int int)
 (lambda ((x int) (y int)) int
   (- x y)))

(define (main)
  (plus (minus 10 5) 2)) ;=> 7

;; func factorial(n int64) int64 {
;; 	{
;; 		n := n
;; 		var acc int64 = 1
;; 		for {
;; 			if n == 0 {
;; 				return acc
;; 			} else {
;; 				_new_n := n - 1
;; 				_new_acc := acc * n
;; 				n = _new_n
;; 				acc = _new_acc
;; 				continue
;; 			}
;; 		}
;; 	}
;; }
(define (factorial (n int64) int64)
 (let loop ((n n)
            (acc int64 1))
  (if (== n 0)
   acc
   (loop (- n 1) (* acc n)))))


(define (ping-pong string)
    (let ((a (chan))
          (b (chan))
          (res (chan))
          (f (lambda (name in out)
               (let loop ((n (!< in)))
                    (if (> n 0)
                        (do
                         (fmt/Println name n)
                         (!> out (- n 1))
                          (loop (!< in)))
                        (!> res "Done"))))))
      (go (f "ping" a b))
      (go (f "pong" b a))
      (!> a 10)
      (!< res)))

(define (ping-ponger (name string)
                     (in (chan int))
                     (out (chan int))
                     (res (chan string))
                     unit)
    (let loop ((n (!< in)))
         (if (> n 0)
             (do
              (fmt/Println name n)
              (!> out (- n 1))
               (loop (!< in)))
             (!> res "Done"))))

(define (ping-pong-2 string)
    (let ((a (chan))
          (b (chan))
          (res (chan)))
      (go (ping-ponger "ping" a b res))
      (go (ping-ponger "pong" b a res))
      (!> a 10)
      (!< res)))
