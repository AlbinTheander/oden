package records/main

type Foo = { name: string }
type Bar = { foo: Foo }

// Construct nested record, type is inferred.
bar = {
  foo = {
    name = "mono"
  }
}

// Accepts nested record, as defined by 'Bar' and 'Foo' above.
printFooName : Bar -> ()
printFooName(x) = println(x.foo.name)

// Accept any record with a name field.
anyTypeOfName : forall a. a -> { name: a }
anyTypeOfName(name) = { name = name }

// Construct a record with a string name.
poly = anyTypeOfName("poly")

// Return name field from any record type with at least that field. Type is
// inferred.
getName(x) = x.name

main() = {
  printFooName(bar)
  println(poly.name)
  println(getName({
    name = "passing a record like this",
    age = 42
  }))
}
